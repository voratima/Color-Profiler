package com.enlighten.utils{		public class HSV extends Object 	{		private var h:Number;		private var s:Number;		private var v:Number;				public function HSV(_h:Number=0, _s:Number=0, _v:Number=0) 		{			h = _h;			s = _s;			v = _v;		}		public function HueShift(_shift:int):void		{			h	+= _shift;			while(h>=360)			{				h	-= 360;			}			while(h<0)			{				h	+= 360;			}		}		public static function RGB2HSV(_color:String):HSV		{			var r:uint	= uint("0x"+_color.substr(0, 2));			var g:uint	= uint("0x"+_color.substr(2, 2));			var b:uint	= uint("0x"+_color.substr(4, 2));			var max:uint	= Math.max(r, g);			max				= Math.max(max, b);			var min:uint	= Math.min(r, g);			min				= Math.min(min, b);			var diff:uint	= max-min;			var sat:Number	= (max==0)?0:(100*diff/max);			var hue:Number;			if(sat == 0)			{				hue	= 0;			}else if(r==max)			{				hue	= 60 * (g-b)/diff;			}else if(g==max)			{				hue	= 120 + 60*(b-r)/diff;			}else if(b==max)			{				hue	= 240+60*(r-g)/diff;			}						if(hue<0)			{				hue	+= 360;			}						var val:uint	= Math.round(max*100/255);			hue				= Math.round(hue);			sat				= Math.round(sat);						var hsv:HSV	= new HSV(hue, sat, val); 			return hsv;		}		public static function HSV2RGB(hsv:HSV):Object		{			var rgb:Object	= new Object();			if(hsv.saturation ==0)			{				rgb.red	= rgb.green	= rgb.blue	= Math.round(hsv.value*2.55);			}else{				hsv.hue			/=60;				hsv.saturation	/=100;				hsv.value		/=100;				var i:int		= Math.floor(hsv.hue);				var f:Number	= hsv.hue - i;				var p:Number	= hsv.value*(1-hsv.saturation);				var q:Number	= hsv.value*(1-hsv.saturation*f);				var t:Number	= hsv.value*(1-hsv.saturation*(1-f));				switch(i)				{					case 0:						rgb.red		= hsv.value;						rgb.green	= t;						rgb.blue	= p;						break;					case 1:						rgb.red		= q;						rgb.green	= hsv.value;						rgb.blue	= p;						break;					case 2:						rgb.red		= p;						rgb.green	= hsv.value;						rgb.blue	= t;						break;					case 3:						rgb.red		= p;						rgb.green	= q;						rgb.blue	= hsv.value;						break;					case 4:						rgb.red		= t;						rgb.green	= p;						rgb.blue	= hsv.value;						break;					default:						rgb.red		= hsv.value;						rgb.green	= p;						rgb.blue	= q;						break;										}				rgb.red		= Math.round(rgb.red*255);				rgb.green	= Math.round(rgb.green*255);				rgb.blue	= Math.round(rgb.blue*255);			}			return rgb;		}		public function set hue(_h:Number):void		{			h = _h;		}		public function get hue():Number		{			return h;		}		public function set saturation(_s:Number):void		{			s = _s;		}		public function get saturation():Number		{			return s;		}		public function set value(_v:Number):void		{			v = _v;		}		public function get value():Number		{			return v;		}	}}