package com.enlighten.utils{		public class HSL extends Object 	{		private var h:Number;		private var s:Number;		private var l:Number;				public function HSL(_h:Number=0, _s:Number=0, _l:Number=0) 		{			h = _h;			s = _s;			l = _l;		}/*		public function HueShift(_shift:int):void		{			h	+= _shift;			while(h>=360)			{				h	-= 360;			}			while(h<0)			{				h	+= 360;			}		}*/		public static function RGB2HSL(_color:String):HSL		{			var r:Number	= uint("0x"+_color.substr(0, 2))/255;			var g:Number	= uint("0x"+_color.substr(2, 2))/255;			var b:Number	= uint("0x"+_color.substr(4, 2))/255;			var max:Number	= Math.max(r, g);			max				= Math.max(max, b);			var min:Number	= Math.min(r, g);			min				= Math.min(min, b);			var diff:Number	= max-min;						var hue:Number;			var sat:Number;			var lit:Number	= (max + min)/2;						if(diff==0)			{				hue			= 0;				sat			= 0;			}else{				if(lit < 0.5)				{					sat		= diff/(max+min);				}else{					sat		= diff/(2-max-min);				}				var diffR:Number	= (((max - r)/6) + (diff/2))/diff;				var diffG:Number	= (((max - g)/6) + (diff/2))/diff;				var diffB:Number	= (((max - b)/6) + (diff/2))/diff;								if(r == max)				{					hue	= diffB - diffG;				}else if(g == max)				{					hue	= (1/3) + diffR - diffB;				}else if(b == max)				{					hue	= (2/3) + diffG - diffR;				}								if(hue<0)				{					hue++;				}				if(hue>1)				{					hue--;				}			}						hue				= Math.round(hue);			sat				= Math.round(sat);			lit				= Math.round(lit);						var hsl:HSL	= new HSL(hue, sat, lit); 			return hsl;		}		/*		public static function HSL2RGB(hsl:HSL):Object		{			var rgb:Object	= new Object();			if(hsl.saturation ==0)			{				rgb.red	= rgb.green	= rgb.blue	= Math.round(hsl.lightness*2.55);			}else{				hsl.hue			/=60;				hsl.saturation	/=100;				hsl.lightness		/=100;				var i:int		= Math.floor(hsl.hue);				var f:Number	= hsl.hue - i;				var p:Number	= hsl.lightness*(1-hsl.saturation);				var q:Number	= hsl.lightness*(1-hsl.saturation*f);				var t:Number	= hsl.lightness*(1-hsl.saturation*(1-f));				switch(i)				{					case 0:						rgb.red		= hsl.lightness;						rgb.green	= t;						rgb.blue	= p;						break;					case 1:						rgb.red		= q;						rgb.green	= hsl.lightness;						rgb.blue	= p;						break;					case 2:						rgb.red		= p;						rgb.green	= hsl.lightness;						rgb.blue	= t;						break;					case 3:						rgb.red		= p;						rgb.green	= q;						rgb.blue	= hsl.lightness;						break;					case 4:						rgb.red		= t;						rgb.green	= p;						rgb.blue	= hsl.lightness;						break;					default:						rgb.red		= hsl.lightness;						rgb.green	= p;						rgb.blue	= q;						break;										}				rgb.red		= Math.round(rgb.red*255);				rgb.green	= Math.round(rgb.green*255);				rgb.blue	= Math.round(rgb.blue*255);			}			return rgb;		}*/		public function set hue(_h:Number):void		{			h = _h;		}		public function get hue():Number		{			return h;		}		public function set saturation(_s:Number):void		{			s = _s;		}		public function get saturation():Number		{			return s;		}		public function set lightness(_l:Number):void		{			l = _l;		}		public function get lightness():Number		{			return l;		}	}}