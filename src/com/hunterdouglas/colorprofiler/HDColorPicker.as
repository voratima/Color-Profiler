package  com.hunterdouglas.colorprofiler{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import com.enlighten.common.*;		import com.hunterdouglas.common.*;		import com.hunterdouglas.photogallery.BrowseScroll;	import com.hunterdouglas.imagine.facetsearch.*;	import com.hunterdouglas.imagine.views.*;	import br.com.stimuli.loading.BulkLoader;    import br.com.stimuli.loading.BulkProgressEvent;    import fl.motion.easing.Back;    import com.enlighten.utils.HSV;    import com.enlighten.utils.HSL;    import flashx.textLayout.formats.Float;	public class HDColorPicker extends Sprite{		private var loader : BulkLoader;		private var loaderXMLSwatches:ENLLoader;		private var xmlSwatches:XML;		private var xmlColors:XML;		private var indexSwatch:int;		private const W:int	= 10;		private const MAX_COL:int			= 29;		private const MAX_COL_SWATCH:int	= 10;		private var scroll:BrowseScroll;		private var container:Sprite;		private var selectedColor:Box;		private var selectedSwatch:HDSwatch;		private var selectedCompColor:Box;		private var listColor:Array;		private var listSwatch:Array;		private var listGradient:Array;		private var listCluster:Array;		private var viewAll:IMagineFacetSearchViewAll;		private var selectedProductID:int	= -1;		private var loaderProductList:HDLoader;		private var productList:XMLList;		private var loadingMessage:HDIMagineLoadingMessage;		private var css:StyleSheet;		private var loaderCSS:URLLoader = new URLLoader();		private var xmlConfig:XML;		private var loaderXMLConfig:ENLLoader;		private var loaderXCart:ENLLoader;		private var productXCart:XMLList;			public function HDColorPicker() 		{			addEventListener(Event.ADDED_TO_STAGE, handlerAddedToStage);		}		private function handlerAddedToStage(e:Event):void		{			loaderXMLSwatches = new ENLLoader();			loaderXMLSwatches.addEventListener(Event.COMPLETE, handlerXMLSwatchesLoaded);			loaderXCart	= new ENLLoader();			loaderXCart.addEventListener(Event.COMPLETE, handlerXMLProductLoaded);						initText(colorNum);			initText(swatchNum);			initText(colorCode);			startLoader();					}		private function startLoader():void		{			loader 	= new BulkLoader("hd-colorpicker");			//loader.logLevel = BulkLoader.LOG_INFO;			loader.addEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);            loader.addEventListener(BulkLoader.PROGRESS, onAllItemsProgress);			loader.add(Path.FONT_QUICKSTART,	{id:"fontQuickStart"});			loader.add(Path.FONT1,	{id:"font1"});			loader.add(Path.FONT2,	{id:"font2"});			loader.add(Path.FONT5,	{id:"font5"});			loader.start();		}		private function onAllItemsProgress(e : BulkProgressEvent) : void{			//trace("\t"+Math.round(100*e.percentLoaded)+" %");        }		private function onAllItemsLoaded(e : Event) : void		{			//trace("-------------------------------------------------------------------");			//trace("-						ALL ITEMS LOADED						  -");			//trace("-------------------------------------------------------------------");			loader.removeEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);			loader.removeEventListener(BulkLoader.PROGRESS, onAllItemsProgress);            enumFonts();						loadXML();		}		private function enumFonts()		{			var embeddedFonts:Array = Font.enumerateFonts(false);			//trace("- FONTS: "+embeddedFonts.length);			//for(var i:Number = 0; i < embeddedFonts.length; i++)			//{			//	var item:Font = embeddedFonts[i];			//	trace("\t[" + i + "] name:" + item.fontName + ", style: " + item.fontStyle + ", type: " + item.fontType);			//}			//END COMMENTING				}		private function loadXML() {			loaderXMLConfig = new ENLLoader();			loaderXMLConfig.addEventListener(Event.COMPLETE, handlerXMLConfigLoaded);			loaderXMLConfig.load(Path.XMLConfig);					}		private function handlerXMLConfigLoaded(e:Event)		{			xmlConfig = XML(e.target.data);			CSSLoader();		}		private function CSSLoader() 		{			var req:URLRequest = new URLRequest(Path.CSS);			loaderCSS.load(req);			loaderCSS.addEventListener(Event.COMPLETE, cssLoaderCompleteHandler);		}		private function cssLoaderCompleteHandler(event:Event):void 		{			css = new StyleSheet();			css.parseCSS(loaderCSS.data);									loadingMessage		= new HDIMagineLoadingMessage(css, xmlConfig.loadingMessages);			loadingMessage.x	= stage.stageWidth/2;			loadingMessage.y	= stage.stageHeight/2;			addChild(loadingMessage);						loadingMessage.message	= HDIMagineLoadingMessage.LOADING_PRODUCT;			loaderProductList = new HDLoader(Path.PRODUCT_LIST);			loaderProductList.addEventListener(Event.COMPLETE,handlerProductListLoaded);		}				private function handlerProductListLoaded(e:Event):void		{			//trace("browseList: "+Path.BROWSE_LIST+dealerSyndicationSuffixStr);			productList	= loaderProductList.data.Product;			viewAll		= new IMagineFacetSearchViewAll(productList);			viewAll.x	= 10;			viewAll.y	= 685;			viewAll.addEventListener(ProductItemEvent.MAKE_SELECTION, handlerViewAllMakeSelection);			addChildAt(viewAll, numChildren-2);						finalInit();		}		private function finalInit():void		{			container	= new Sprite();			var box:Box	= new Box(20, 20, 0xFFDD00, 0);			container.addChild(box);			container.addEventListener(HDColorPickerEvent.FOCUS, handlerSwatchFocus);			container.addEventListener(HDColorPickerEvent.SELECTED, handlerSwatchSelected);			containerSwatch.addChild(container);						var prop:Object	= 								{		x:0									,	y:0									,	backgroundWidth:360-W									//,	backgroundWidth:690-W									,	backgroundHeight:640									,	backgroundColor:0xFFFFFF									,	backgroundAlpha:1									,	border:1									,	borderColor:0xb8b7af									,	borderAlpha:0.5								}			scroll = new BrowseScroll(container, prop);			containerSwatch.addChild(scroll);						viewAll.y	= containerSwatch.y + prop.backgroundHeight + W;			thresholdValue.addEventListener(KeyboardEvent.KEY_DOWN, handlerThresholdValueKeyDown);			btnMask.addEventListener(MouseEvent.CLICK, handlerBtnMaskMouseClick);			loadingMessage.hide();		}		function handlerThresholdValueKeyDown(event:KeyboardEvent)		{		   	// if the key is ENTER		   	if(event.charCode == 13)			{				recluster();		   	}		}		function handlerBtnMaskMouseClick(event:MouseEvent)		{			trace("handlerBtnMaskMouseClick ########## "+containerGradient.mask);		   	// if the key is ENTER		   	if(containerGradient.mask==null)			{				containerGradientMask.width	= containerGradient.width;				containerGradient.mask		= containerGradientMask;				containerGradientMask.visible	= true;		   	}else{				containerGradient.mask		= null;				containerGradientMask.visible	= false;							}		}		private function handlerSwatchFocus(e:HDColorPickerEvent):void		{			container.setChildIndex(DisplayObject(e.target), container.numChildren-1);		}		private function handlerViewAllMakeSelection(e:ProductItemEvent):void		{			trace('PRODUCT ID: '+e.productID);			if(selectedProductID!= e.productID)			{				clearInterface();				selectedProductID	= e.productID;				viewAll.setTitle(e.productID);				loadProduct(XML(productList.(@id==selectedProductID)));			}		}		private function clearInterface():void		{			clearSelectedProfile();			while(containerColor.numChildren>0)			{				containerColor.removeChildAt(0);			}			while(container.numChildren>1)			{				container.removeChildAt(1);			}						while(containerGradient.numChildren>0)			{				containerGradient.removeChildAt(0);			}			while(containerCluster.numChildren>0)			{				containerCluster.removeChildAt(0);			}			listColor	= new Array();			listSwatch	= new Array();			listGradient	= new Array();			listCluster		= new Array();		}		private function clearSelectedProfile():void		{			if(selectedColor!=null)			{				removeChild(selectedColor);				selectedColor	= null;			}			if(selectedCompColor!=null)			{				removeChild(selectedCompColor);				selectedCompColor	= null;			}			if(selectedSwatch!=null)			{				removeChild(selectedSwatch);				selectedSwatch	= null;			}			while(containerSimilarColor.numChildren>0)			{				containerSimilarColor.removeChildAt(0);			}			while(containerSimilarSwatch.numChildren>0)			{				containerSimilarSwatch.removeChildAt(0);			}			while(containerCompColor.numChildren>0)			{				containerCompColor.removeChildAt(0);			}			while(containerCompSwatch.numChildren>0)			{				containerCompSwatch.removeChildAt(0);			}			setText(colorCode, "");		}		private function loadProduct(_xml:XML):void		{			if(String(_xml.ProductSwatchCartURL).length>0)			{				loadingMessage.message	= "xcart";							var url:String	= Path.REMOTE_DOMAIN+_xml.ProductSwatchCartURL;				//var url:String	= "xml/xcart.xml";				trace("URL: "+url);				loaderXCart.load(url);			}else{				setText(swatchNum, "SWATCH FOUND: 0");			}		}		private function handlerXMLProductLoaded(e:Event):void		{			loadingMessage.message	= HDIMagineLoadingMessage.LOADING_SWATCHES;			productXCart 	= XML(e.target.data).products.product.extra_fields.texture_id;			trace("LOADED  ... \n"+productXCart.length());			indexSwatch	= -1;			loadXMLSwatches();					}		private function loadXMLSwatches() {			indexSwatch++;			if(indexSwatch<productXCart.length())			{				var path:String	= Path.DOMAIN+"/selectSwatch.php?texture_id="+productXCart[indexSwatch];							//var path:String	= Path.DOMAIN+"/selectSwatch8Shades.php?texture_id="+productXCart[indexSwatch];							trace("LOAD SWATCH COLOR PROFILE: "+indexSwatch+" "+path);				var found:Boolean	= false;				for(var n:int=0; n<listSwatch.length;n++)				{					if(listSwatch[n].texture_id == productXCart[indexSwatch])					{						found	= true;						break;					}				}				if(!found)				{					loaderXMLSwatches.load(path);				}else{					loadXMLSwatches();				}			}else{				setText(swatchNum, "SWATCH FOUND: "+listSwatch.length);				var box:Box	= new Box(W, W, uint("0xFF0000"), 0, 1, uint(0xFF0000), 1);				var row:int	= Math.floor(listColor.length/MAX_COL);				var col:int	= listColor.length%MAX_COL;				box.x		= col*box.width;				box.y		= row*box.height;				containerColor.addChild(box);								listColor.sort(sortByColor);				trace("======================");								recluster();								for(var m:int=0; m<listSwatch.length; m++)				{					listSwatch[m].loadImage();				}				loadingMessage.hide();			}		}		private function recluster():void		{			while(containerGradient.numChildren>0)			{				containerGradient.removeChildAt(0);			}			while(containerCluster.numChildren>0)			{				containerCluster.removeChildAt(0);			}			listGradient	= new Array();			listCluster		= new Array();						var hues:Array	= new Array();			var max_row:int	= 0;			var threshold:Number	= Number(thresholdValue.text);			trace("THRESHOLD: "+listSwatch.length+"/"+threshold);			for(var l:int=0; l<listColor.length; l++)			{				var box1:HDColorBox	= new HDColorBox(l, listColor[l].color, W, W);				box1.count			= listColor[l].count;				box1.addEventListener(MouseEvent.ROLL_OVER, handlerContainerGradientRollOver);				box1.addEventListener(MouseEvent.ROLL_OUT, handlerContainerColorRollOut);				box1.addEventListener(MouseEvent.CLICK, handlerContainerColorClick);				listGradient.push(box1);													var subs:Array;									var found:Boolean	= false;				for(var m:int=0; m<hues.length;m++)				{					subs	= hues[m];										var box2:HDColorBox	= subs[0];					var dist:Number	= colorDistance(box1.color, box2.color);					//trace("OLD CLUSTER "+m+": "+box2.hsv.hue+", "+box2.hsv.saturation+", "+box2.hsv.value+" - "+box1.hsv.hue+", "+box1.hsv.saturation+", "+box1.hsv.value+" => "+dist);					//trace(b.hsv.hue+", "+b.hsv.saturation+", "+b.hsv.value+", => "+b.color+" => "+subs);								if(dist< threshold)					{						subs.push(box1);						hues[m]	= subs;						found	= true;						max_row				= Math.max(max_row, subs.length);						break;					}				}				if(!found)				{					trace("NEW CLUSTER "+hues.length+": "+box1.hsv.hue+", "+box1.hsv.saturation+", "+box1.hsv.value);					subs	= new Array();					subs.push(box1);					hues.push(subs);											}													//*/			}			var col2:int = -1;			for(var o:int=0; o<hues.length;o++)			{				var subs2:Array		= hues[o];				col2++;				var max:int		= subs2[0].count;				var index:int	= 0;				var clusters:Array	= new Array();								for(var p:int=0; p<subs2.length; p++)				{					var box2:HDColorBox	= subs2[p];					var row2:int	= (Math.floor(subs2.length/2)-p);					//trace(col2+"-"+row2+": "+box2.hsv.hue+", "+box2.hsv.saturation+", "+box2.hsv.value+", => "+box2.color+" => "+subs2);					box2.x	= col2*box2.width;					box2.y	= row2*box2.height;					containerGradient.addChild(box2);										if(subs2[p].count>max)					{						max		= subs2[p].count;						index	= p;					}					clusters.push(box2.color);				}				var box3:HDColorBox	= new HDColorBox(listCluster.length, subs2[index].color, W, W);				box3.x	= listCluster.length*box3.width;				box3.clusters		= clusters;				box3.count			= subs2[index].count;				box3.addEventListener(MouseEvent.ROLL_OVER, handlerContainerClusterRollOver);				box3.addEventListener(MouseEvent.ROLL_OUT, handlerContainerColorRollOut);				box3.addEventListener(MouseEvent.CLICK, handlerContainerClusterClick);				listCluster.push(box3);				containerCluster.addChild(box3);			}			//listCluster.sort(sortByLuma);			listCluster.sort(sortByColor);			for(var q:int=0; q<listCluster.length; q++)			{				var box4:HDColorBox	= listCluster[q];				//trace(col2+"-"+row2+": "+box2.hsv.hue+", "+box2.hsv.saturation+", "+box2.hsv.value+", => "+box2.color+" => "+subs2);				box4.x	= q*box4.width;				trace("CLUSTER "+q+": "+box4.hsv.hue+", "+box4.hsv.saturation+", "+box4.hsv.value+" ["+box4.count+"]");			}		}		public function dec2hex( dec:String ) : String 		{			var hex:String 	= "";//"0x";			var bytes:Array	= dec.split(" ");			for( var i:int = 0; i < bytes.length; i++ )				hex += d2h( int(bytes[i]) );			return hex;		}		private function d2h( d:int ) : String 		{			var c:Array = [ '0', '1', '2', '3', '4', '5', '6', '7', '8',					'9', 'A', 'B', 'C', 'D', 'E', 'F' ];			if( d > 255 ) d = 255;			var l:int = d / 16;			var r:int = d % 16;			return c[l]+c[r];		}		private function handlerXMLSwatchesLoaded(e:Event)		{						xmlSwatches 	= XML(e.target.data);// as XML;			//trace("handlerXMLSwatchesLoaded:");			setText(swatchNum, "SWATCH: "+(indexSwatch+1)+" of "+productXCart.length());			//trace("\t"+xmlSwatches);			//trace("------------");			var profile:HDColorPickerProfile	= new HDColorPickerProfile();			if(xmlSwatches.swatch == undefined)			{				trace("ERRROR .....");				profile.setNullContent(listSwatch.length, productXCart[indexSwatch]);							}else{				profile.setContent(listSwatch.length, XML(xmlSwatches.swatch));				for(var i:int=0; i<xmlSwatches.swatch.colors.color.length(); i++)				{					var found:Boolean	= false;					for(var j:int=0; j<listColor.length; j++)					{						//trace(i+"-"+j+": "+listColor[j].color+" - "+xmlSwatches.swatch.colors.color[i].code);						if(listColor[j].color==xmlSwatches.swatch.colors.color[i].code)						{							found	= true;							listColor[j].count++;							trace("COUNT ####################### "+listColor[j].count);							break;						}					}					if(!found)					{						var box:HDColorBox	= new HDColorBox(i, xmlSwatches.swatch.colors.color[i].code, W, W);						//box	= new Box(W, W, uint("0x"+xmlColors.color[i]), 1, 1, 0xFFFFFF, 1);						var row:int			= Math.floor(listColor.length/MAX_COL);						var col:int			= listColor.length%MAX_COL;						box.x				= col*box.width;						box.y				= row*box.height;						box.addEventListener(MouseEvent.ROLL_OVER, handlerContainerColorRollOver);						box.addEventListener(MouseEvent.ROLL_OUT, handlerContainerColorRollOut);						box.addEventListener(MouseEvent.CLICK, handlerContainerColorClick);						containerColor.addChild(box);						listColor.push(box);						setText(colorNum, "COLOR FOUND: "+listColor.length);								}				}						}						profile.y	= container.height;						container.addChild(profile);			listSwatch.push(profile);			scroll.refreshContent();			loadXMLSwatches();		}		private function handlerContainerClusterRollOver(e:MouseEvent):void		{			containerCluster.setChildIndex(DisplayObject(e.target), containerCluster.numChildren-1);			setText(colorCode, "COLOR CODE: "+e.target.color);		}		private function handlerContainerGradientRollOver(e:MouseEvent):void		{			containerGradient.setChildIndex(DisplayObject(e.target), containerGradient.numChildren-1);			setText(colorCode, "COLOR CODE: "+e.target.color);		}		private function handlerContainerColorRollOver(e:MouseEvent):void		{			containerColor.setChildIndex(DisplayObject(e.target), containerColor.numChildren-1);			setText(colorCode, "COLOR CODE: "+e.target.color);		}		private function handlerContainerColorRollOut(e:MouseEvent):void		{			if(selectedColor != null)			{				setText(colorCode, "SELECTED COLOR CODE: "+e.target.color);			}		}		private function colorDistance(color1:String, color2:String):Number		{			var r1:uint			= uint("0x"+color1.substr(0, 2));			var g1:uint			= uint("0x"+color1.substr(2, 2));			var b1:uint			= uint("0x"+color1.substr(4, 2));			var r2:uint			= uint("0x"+color2.substr(0, 2));			var g2:uint			= uint("0x"+color2.substr(2, 2));			var b2:uint			= uint("0x"+color2.substr(4, 2));						//trace("color1: "+color1+" ["+r1+", "+g1+", "+b1+"]");			var aveR:uint	= (r1+r2)/2;			var diffR:uint	= r1-r2;			var diffG:uint	= g1-g2;			var diffB:uint	= b1-b2;			var diffC:Number	= Math.sqrt(												(2+aveR/256)*diffR*diffR 											+	4*diffG*diffG 											+	(2 + (255-aveR)/256)*diffB*diffB											);			//trace("\tcolor1: "+color1+" ["+r1+", "+g1+", "+b1+"] - color2: "+color2+" ["+r2+", "+g2+", "+b2+"] -> "+diffC);			return diffC;		}		private function handlerContainerClusterClick(e:MouseEvent):void		{			clearSelectedProfile();						setText(colorCode, "SELECTED COLOR CODE: "+e.target.color);			selectedColor	= new Box(containerColor.width, 2*W, uint("0x"+e.target.color), 1, 1, uint(0xFFFFFF), 1);			selectedColor.x	= containerColor.x;			selectedColor.y	= containerColor.y + containerColor.height + W;			addChild(selectedColor);						containerSimilarColor.y	= selectedColor.y + selectedColor.height + W;						var diffCArray:Array	= new Array();			var i:int;			var j:int;			var k:int;			var obj:Object;			var clusters:Array	= HDColorBox(e.target).clusters;			for(j=0; j<clusters.length; j++)			{				var color1:String	= clusters[j];						//trace("color1: "+color1+" ["+r1+", "+g1+", "+b1+"]");								for(i=0; i<listColor.length;i++)				{					var color2:String	= listColor[i].color;										//trace("\tcolor2: "+color2+" ["+r2+", "+g2+", "+b2+"] -> "+diffC);					obj	= {id:i, color:color2, diffC:colorDistance(color1, color2)};					diffCArray.push(obj);				}						}			diffCArray.sort(sortByColorDiff);			var box:*;			var row:int;			var col:int;			var index:int	= -1;			var list:Array	= new Array();			for(i=0; i<diffCArray.length;i++)			{				obj			= diffCArray[i];				var r2:uint	= uint("0x"+obj.color.substr(0, 2));				var g2:uint	= uint("0x"+obj.color.substr(2, 2));				var b2:uint	= uint("0x"+obj.color.substr(4, 2));													if(obj.diffC<Number(thresholdSwatchValue.text))				{					index++;					box		= new Box(W, W, uint("0x"+obj.color), 1, 1, 0xFFFFFF, 1);					row		= Math.floor(index/MAX_COL);					col		= index%MAX_COL;					box.x	= col*box.width;					box.y	= row*box.height;					containerSimilarColor.addChild(box);					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);//+" ADDED");					list.push(obj);				}else{					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);				}			}			index	= -1;			containerSimilarSwatch.y	= containerSimilarColor.y + containerSimilarColor.height + W;			for(i=0; i<listSwatch.length;i++)			{				var swatchColorList:Array	= listSwatch[i].listColor;				var found:Boolean	= false;				for(j=0; j<swatchColorList.length; j++)				{					for(k=0; k<list.length; k++)					{						if(swatchColorList[j].color==list[k].color)						{							found	= true;							break;						}					}					//trace("\tcolor2: "+swatchColorList[j].color+" -> "+found);										if(found)					{						break;					}				}				if(found)				{					index++;					//trace("\tFOUND: "+index+" : "+listSwatch[i].imageName);										var swatch:HDSwatch	= new HDSwatch(listSwatch[i].imageName);					row			= Math.floor(index/MAX_COL_SWATCH);					col			= index%MAX_COL_SWATCH;					swatch.x	= col*swatch.width;					swatch.y	= row*swatch.height;					containerSimilarSwatch.addChild(swatch);					//trace("\t.............");				}			}		}		private function handlerContainerColorClick(e:MouseEvent):void		{			//loadingMessage.message	= "swatch_similar";			//if(selectedColor != null)			//{				clearSelectedProfile();			//}			setText(colorCode, "SELECTED COLOR CODE: "+e.target.color);			selectedColor	= new Box(containerColor.width, 2*W, uint("0x"+e.target.color), 1, 1, uint(0xFFFFFF), 1);			selectedColor.x	= containerColor.x;			selectedColor.y	= containerColor.y + containerColor.height + W;			addChild(selectedColor);						containerSimilarColor.y	= selectedColor.y + selectedColor.height + W;						var color1:String	= e.target.color;			var r1:uint			= uint("0x"+color1.substr(0, 2));			var g1:uint			= uint("0x"+color1.substr(2, 2));			var b1:uint			= uint("0x"+color1.substr(4, 2));			var r2:uint;			var g2:uint;			var b2:uint;						//trace("color1: "+color1+" ["+r1+", "+g1+", "+b1+"]");						var diffCArray:Array	= new Array();			var i:int;			var j:int;			var k:int;			var obj:Object;						for(i=0; i<listColor.length;i++)			{				var color2:String	= listColor[i].color;				r2	= uint("0x"+color2.substr(0, 2));				g2	= uint("0x"+color2.substr(2, 2));				b2	= uint("0x"+color2.substr(4, 2));												var aveR:uint	= (r1+r2)/2;				var diffR:uint	= r1-r2;				var diffG:uint	= g1-g2;				var diffB:uint	= b1-b2;				var diffC:Number	= Math.sqrt(													(2+aveR/256)*diffR*diffR 												+	4*diffG*diffG 												+	(2 + (255-aveR)/256)*diffB*diffB												);				//trace("\tcolor2: "+color2+" ["+r2+", "+g2+", "+b2+"] -> "+diffC);				obj	= {id:i, color:color2, diffC:diffC};				diffCArray.push(obj);			}			diffCArray.sort(sortByColorDiff);			var box:*;			var row:int;			var col:int;			var index:int	= -1;			var list:Array	= new Array();			for(i=0; i<diffCArray.length;i++)			{				obj			= diffCArray[i];				r2	= uint("0x"+obj.color.substr(0, 2));				g2	= uint("0x"+obj.color.substr(2, 2));				b2	= uint("0x"+obj.color.substr(4, 2));													if(obj.diffC<60)				{					index++;					box		= new Box(W, W, uint("0x"+obj.color), 1, 1, 0xFFFFFF, 1);					row		= Math.floor(index/MAX_COL);					col		= index%MAX_COL;					box.x	= col*box.width;					box.y	= row*box.height;					containerSimilarColor.addChild(box);					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);//+" ADDED");					list.push(obj);				}else{					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);				}			}			index	= -1;			containerSimilarSwatch.y	= containerSimilarColor.y + containerSimilarColor.height + W;			for(i=0; i<listSwatch.length;i++)			{				var swatchColorList:Array	= listSwatch[i].listColor;				var found:Boolean	= false;				for(j=0; j<swatchColorList.length; j++)				{					for(k=0; k<list.length; k++)					{						if(swatchColorList[j].color==list[k].color)						{							found	= true;							break;						}					}					//trace("\tcolor2: "+swatchColorList[j].color+" -> "+found);										if(found)					{						break;					}				}				if(found)				{					index++;					//trace("\tFOUND: "+index+" : "+listSwatch[i].imageName);										var swatch:HDSwatch	= new HDSwatch(listSwatch[i].imageName);					row			= Math.floor(index/MAX_COL_SWATCH);					col			= index%MAX_COL_SWATCH;					swatch.x	= col*swatch.width;					swatch.y	= row*swatch.height;					containerSimilarSwatch.addChild(swatch);					//trace("\t.............");				}			}						//COMPLEMENTARY COLOR ////////////////////			/*			color1			= getComplementaryColor(e.target.color);			r1				= uint("0x"+color1.substr(0, 2));			g1				= uint("0x"+color1.substr(2, 2));			b1				= uint("0x"+color1.substr(4, 2));						selectedCompColor	= new Box(containerColor.width, 2*W, uint("0x"+color1), 1, 1, uint(0xFFFFFF), 1);			selectedCompColor.x	= containerSimilarSwatch.x;			selectedCompColor.y	= containerSimilarSwatch.y + containerSimilarSwatch.height + W;			addChild(selectedCompColor);						containerCompColor.y	= selectedCompColor.y + selectedCompColor.height + W;			diffCArray		= new Array();						for(i=0; i<listColor.length;i++)			{				color2	= listColor[i].color;				r2	= uint("0x"+color2.substr(0, 2));				g2	= uint("0x"+color2.substr(2, 2));				b2	= uint("0x"+color2.substr(4, 2));												aveR	= (r1+r2)/2;				diffR	= r1-r2;				diffG	= g1-g2;				diffB	= b1-b2;				diffC	= Math.sqrt(													(2+aveR/256)*diffR*diffR 												+	4*diffG*diffG 												+	(2 + (255-aveR)/256)*diffB*diffB												);				//trace("\tcolor2: "+color2+" ["+r2+", "+g2+", "+b2+"] -> "+diffC);				obj	= {id:i, color:color2, diffC:diffC};				diffCArray.push(obj);			}			diffCArray.sort(sortByColorDiff);			index	= -1;			list	= new Array();			for(i=0; i<diffCArray.length;i++)			{				obj			= diffCArray[i];				r2	= uint("0x"+obj.color.substr(0, 2));				g2	= uint("0x"+obj.color.substr(2, 2));				b2	= uint("0x"+obj.color.substr(4, 2));													if(obj.diffC<60)				{					index++;					box		= new Box(W, W, uint("0x"+obj.color), 1, 1, 0xFFFFFF, 1);					row		= Math.floor(index/MAX_COL);					col		= index%MAX_COL;					box.x	= col*box.width;					box.y	= row*box.height;					containerCompColor.addChild(box);					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);//+" ADDED");					list.push(obj);				}else{					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);				}			}			index	= -1;			containerCompSwatch.y	= containerCompColor.y + containerCompColor.height + W;			for(i=0; i<listSwatch.length;i++)			{				swatchColorList	= listSwatch[i].listColor;				found			= false;				for(j=0; j<swatchColorList.length; j++)				{					for(k=0; k<list.length; k++)					{						if(swatchColorList[j].color==list[k].color)						{							found	= true;							break;						}					}					//trace("\tcolor2: "+swatchColorList[j].color+" -> "+found);										if(found)					{						break;					}				}				if(found)				{					index++;					//trace("\tFOUND: "+index+" : "+listSwatch[i].imageName);										swatch		= new HDSwatch(listSwatch[i].imageName);					row			= Math.floor(index/MAX_COL_SWATCH);					col			= index%MAX_COL_SWATCH;					swatch.x	= col*swatch.width;					swatch.y	= row*swatch.height;					containerCompSwatch.addChild(swatch);					//trace("\t.............");				}			}*/			//loadingMessage.hide();		}		private function getComplementaryColor(_color:String):String		{			var hsv:HSV	= HSV.RGB2HSV(_color);			hsv.HueShift(180);			var rgb:Object	= HSV.HSV2RGB(hsv);			return rgb.red.toString(16)+rgb.green.toString(16)+rgb.blue.toString(16);		}		private function handlerSwatchSelected(e:HDColorPickerEvent):void		{			trace('SWATCH ID: '+e.target.id);			//if(selectedSwatch != null)			//{				clearSelectedProfile();			//}			setText(colorCode, "SELECTED SWATCH : "+listSwatch[e.target.id].texture_id);			selectedSwatch	= new HDSwatch(listSwatch[e.target.id].imageName);			selectedSwatch.x	= containerColor.x;			selectedSwatch.y	= containerColor.y + containerColor.height + W;			addChild(selectedSwatch);						containerSimilarColor.y	= selectedSwatch.y + selectedSwatch.height + W;			//////////////						var color1:String;			var r1:uint;			var g1:uint;			var b1:uint;			var r2:uint;			var g2:uint;			var b2:uint;						//trace("color1: "+color1+" ["+r1+", "+g1+", "+b1+"]");						var diffCArray:Array	= new Array();			var i:int;			var j:int;			var k:int;			var obj:Object;			var colors:Array	= listSwatch[e.target.id].listColor;			var box:*;			var row:int;			var col:int;			var index:int	= -1;			var list:Array	= new Array();			for(i=0; i<colors.length; i++)			{				color1	= colors[i].color;				r1		= uint("0x"+color1.substr(0, 2));				g1		= uint("0x"+color1.substr(2, 2));				b1		= uint("0x"+color1.substr(4, 2));							for(j=0; j<listColor.length;j++)				{					var color2:String	= listColor[j].color;					r2	= uint("0x"+color2.substr(0, 2));					g2	= uint("0x"+color2.substr(2, 2));					b2	= uint("0x"+color2.substr(4, 2));															var aveR:uint	= (r1+r2)/2;					var diffR:uint	= r1-r2;					var diffG:uint	= g1-g2;					var diffB:uint	= b1-b2;					var diffC:Number	= Math.sqrt(														(2+aveR/256)*diffR*diffR 													+	4*diffG*diffG 													+	(2 + (255-aveR)/256)*diffB*diffB													);					//trace("\tcolor2: "+color2+" ["+r2+", "+g2+", "+b2+"] -> "+diffC);					index++;					obj	= {id:index, color:color2, diffC:diffC};					diffCArray.push(obj);				}			}			diffCArray.sort(sortByColorDiff);			index	= -1;			for(i=0; i<diffCArray.length;i++)			{				obj			= diffCArray[i];				r2	= uint("0x"+obj.color.substr(0, 2));				g2	= uint("0x"+obj.color.substr(2, 2));				b2	= uint("0x"+obj.color.substr(4, 2));													if(obj.diffC<60)				{					index++;					box		= new Box(W, W, uint("0x"+obj.color), 1, 1, 0xFFFFFF, 1);					row		= Math.floor(index/MAX_COL);					col		= index%MAX_COL;					box.x	= col*box.width;					box.y	= row*box.height;					containerSimilarColor.addChild(box);					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);//+" ADDED");					list.push(obj);				}else{					//trace("\tcolor3: "+obj.color+" ["+r2+", "+g2+", "+b2+"] -> "+obj.diffC);				}			}			index	= -1;			containerSimilarSwatch.y	= containerSimilarColor.y + containerSimilarColor.height + W;			for(i=0; i<listSwatch.length;i++)			{				var swatchColorList:Array	= listSwatch[i].listColor;				var found:Boolean	= false;				for(j=0; j<swatchColorList.length; j++)				{					for(k=0; k<list.length; k++)					{						if(swatchColorList[j].color==list[k].color)						{							found	= true;							break;						}					}					//trace("\tcolor2: "+swatchColorList[j].color+" -> "+found);										if(found)					{						break;					}				}				if(found)				{					index++;					//trace("\tFOUND: "+index+" : "+listSwatch[i].imageName);										var swatch:HDSwatch	= new HDSwatch(listSwatch[i].imageName);					row			= Math.floor(index/MAX_COL_SWATCH);					col			= index%MAX_COL_SWATCH;					swatch.x	= col*swatch.width;					swatch.y	= row*swatch.height;					containerSimilarSwatch.addChild(swatch);					//trace("\t.............");				}			}		}		private function sortByColorDiff(a:Object, b:Object)		{			if(a.diffC<b.diffC)			{				return -1;			}else if(a.diffC>b.diffC)			{				return 1;			}else{				return 0;			}		}		private function sortByCount(a:Object, b:Object)		{			if(a.count<b.count)			{				return 1;			}else if(a.count>b.count)			{				return -1;			}else{				return 0;			}		}		private function sortByColor(a:HDColorBox, b:HDColorBox)		{			//ALPHABETICALLY			/*if(a.color<b.color)			{				return -1;			}else if(a.color>b.color)			{				return 1;			}else{				return 0;			}*/			//SHV			/*			if(a.hsv.saturation<b.hsv.saturation)			{				return -1;			}else if(a.hsv.saturation>b.hsv.saturation)			{				return 1;			}else{				if(a.hsv.hue<b.hsv.hue)				{					return -1;				}else if(a.hsv.hue>b.hsv.hue)				{					return 1;				}else{					if(a.hsv.value<b.hsv.value)					{						return -1;					}else if(a.hsv.value>b.hsv.value)					{						return 1;					}else{						return 0;					}				}			}*/			//HSV			//*			if(a.hsv.hue<b.hsv.hue)			{				return -1;			}else if(a.hsv.hue>b.hsv.hue)			{				return 1;			}else{				if(a.hsv.saturation<b.hsv.saturation)				{					return -1;				}else if(a.hsv.saturation>b.hsv.saturation)				{					return 1;				}else{					if(a.hsv.value<b.hsv.value)					{						return -1;					}else if(a.hsv.value>b.hsv.value)					{						return 1;					}else{						return 0;					}				}				/*if(a.hsv.value<b.hsv.value)				{					return -1;				}else if(a.hsv.value>b.hsv.value)				{					return 1;				}else{					if(a.hsv.saturation<b.hsv.saturation)					{						return -1;					}else if(a.hsv.saturation>b.hsv.saturation)					{						return 1;					}else{						return 0;					}				}*/			}			//*/						//HSL			/*			if(a.hsl.hue<b.hsl.hue)			{				return -1;			}else if(a.hsl.hue>b.hsl.hue)			{				return 1;			}else{				if(a.hsl.saturation<b.hsl.saturation)				{					return -1;				}else if(a.hsl.saturation>b.hsl.saturation)				{					return 1;				}else{					if(a.hsl.lightness<b.hsl.lightness)					{						return -1;					}else if(a.hsl.lightness>b.hsl.lightness)					{						return 1;					}else{						return 0;					}				}								}*/		}		private function sortByLuma(a:HDColorBox, b:HDColorBox)		{			if(a.luma<b.luma)			{				return 1;			}else if(a.luma>b.luma)			{				return -1;			}else{				if(a.hsv.hue<b.hsv.hue)				{					return 1;				}else if(a.hsv.hue>b.hsv.hue)				{					return -1;				}else{					if(a.hsv.saturation<b.hsv.saturation)					{						return 1;					}else if(a.hsv.saturation>b.hsv.saturation)					{						return -1;					}else{						if(a.hsv.value<b.hsv.value)						{							return 1;						}else if(a.hsv.value>b.hsv.value)						{							return -1;						}else{							return 0;						}					}				}			}		}		private function onIOError(event:IOErrorEvent):void 		{			trace("Error loading URL.");		}		private function initText(title:TextField):void		{			title.styleSheet	= css;			//title.border		= true;			title.embedFonts 	= true;			title.multiline		= false;			title.autoSize		= TextFieldAutoSize.LEFT;			title.antiAliasType	= AntiAliasType.ADVANCED;			//title.sharpness	= -200;			//title.thickness	= 100;			//title.selectable	= false;		}		public function setText(title:TextField, str:String):void		{			title.htmlText	= '<p class="loadingMessage"><b>'+str+'</b></p>';		}	}	}