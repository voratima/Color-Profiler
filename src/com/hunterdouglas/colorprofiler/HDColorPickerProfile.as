package  com.hunterdouglas.colorprofiler{	import flash.display.*;	import flash.events.*;	import flash.geom.Matrix;	import flash.text.*;	import flash.net.URLRequest;		import com.enlighten.common.*;			public class HDColorPickerProfile extends Sprite	{		public var id:int;		private const W:int	= 20;		private var imageLoader:Loader;		private const MAX_COL:int	= 19;		public var imageName:String;		public var listColor:Array;		public var texture_id:String;		public function HDColorPickerProfile():void		{			listColor			= new Array();						border.buttonMode	= true;			border.addEventListener(MouseEvent.CLICK, handlerMouseClick);			border.addEventListener(MouseEvent.ROLL_OVER, handlerRollOver);			border.addEventListener(MouseEvent.ROLL_OUT, handlerRollOut);						imageLoader 		= new Loader();			thumb.addChild(imageLoader);						imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleLoadImageComplete);			//imageLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR , handlerLoadImageError);		}		private function handlerMouseClick(e:MouseEvent):void		{			dispatchEvent(new HDColorPickerEvent(HDColorPickerEvent.SELECTED, true, false,{id:id}));		}		private function handlerRollOver(e:MouseEvent):void		{			thumbMask.x			= border.x		= thumb.x-W/2;			thumbMask.y			= border.y		= thumb.y-W/2;			thumbMask.width		= border.width	= 2*W;			thumbMask.height	= border.height	= 2*W;						dispatchEvent(new HDColorPickerEvent(HDColorPickerEvent.FOCUS, true, false));		}		private function handlerRollOut(e:MouseEvent):void		{			thumbMask.x			= border.x		= thumb.x;			thumbMask.y			= border.y		= thumb.y;			thumbMask.width		= border.width	= W;			thumbMask.height	= border.height	= W;		}		public function setContent(_id:int, _xml:XML):void		{			id				= _id;			swatchID.text	= String(_id);			swatchName.text	= _xml.file+" ["+_xml.colors.color.length()+"]";//+"\n"+_xml.width+" x "+_xml.height;									var row:int;			var col:int;									for(var i:int=0; i<_xml.colors.color.length(); i++)			{				var box:HDColorBox	= new HDColorBox(i, _xml.colors.color[i].code, W, W);				//var box:Box	= new Box(W, W, uint("0x"+_xml.colors.color[i].code), 1, 1, 0xFFFFFF, 1);				//trace("Color: 0x"+_colors[i].color+" ["+_colors[i].count+"]");				row	= Math.floor(i/MAX_COL);				col	= i%MAX_COL;				box.x		= col*box.width;				box.y		= row*box.height;				box.enabled	= false;				colors.addChild(box);				listColor.push(box);			}			line.y		= colors.height;			texture_id	= String(_xml.file).substr(0, String(_xml.file).length-4);			imageName	= texture_id+".jpg";			//var imageURL:String	= "images/tiles/105/"+String(_xml.file).substr(0, String(_xml.file).length-4)+".jpg";			//trace(imageURL);			//imageLoader.load(new URLRequest(imageURL)); 					}		public function setNullContent(_id:int, _str:String):void		{			id				= _id;			swatchID.text	= String(_id);			swatchName.text	= _str+" [MISSING]";//+"\n"+_xml.width+" x "+_xml.height;						line.y			= W;			texture_id		= _str;			imageName		= texture_id+".jpg";					}		public function get backgroundHeight():int		{			return W;		}		public function loadImage():void		{			var imageURL:String	= "images/tiles/105/"+imageName;			//trace(imageURL);			imageLoader.load(new URLRequest(imageURL)); 		}		private function handleLoadImageComplete(e:Event):void		{			imageLoader.x	= (W-imageLoader.width)/2;			imageLoader.y	= (W-imageLoader.height)/2;		}	}}