package com.hunterdouglas.photogallery{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Rectangle;		import com.hunterdouglas.common.Box;	public dynamic class BrowseScroll extends MovieClip {		//public var main:MovieClip;		public var scrollMC:ScrollMC;		public var content:*;		private var prop:Object;		private var scrollMask:Box;		private var mode:String;				private var percent:Number = 0;		private var isDragging:Boolean = false;			private var STEP:Number = 3;			private var y0:Number;			public function BrowseScroll(_content:*, _prop:Object)//, _data:Object)		{			//trace("BrowseScroll:"+_main);			content = _content;			prop = _prop;			scrollMC = new ScrollMC();			addChild(scrollMC);						if (content.height < _prop.backgroundHeight)			{				scrollMC.visible = false;			}else {				scrollMC.visible = true;			}			scrollMC.track.x		= scrollMC.up.x;			scrollMC.track.y		= Math.round(scrollMC.up.y + scrollMC.up.height);			scrollMC.down.x			= scrollMC.up.x;			scrollMC.down.y 		= _prop.backgroundHeight - scrollMC.down.height;			scrollMC.track.width	= scrollMC.up.width;			scrollMC.track.height 	= scrollMC.down.y - scrollMC.up.y - scrollMC.down.height;			//trace("track h: "+scrollMC.track.height+" y: "+scrollMC.track.y);						scrollMask = new Box(_prop.backgroundWidth, _prop.backgroundHeight, 0x99FF00, 0.5);			addChild(scrollMask);						scrollMC.x = _prop.backgroundWidth - scrollMC.width;			scrollMC.y = scrollMask.y;						_content.mask = scrollMask;						y0 = _content.y;									//scrollMC.up.mouseChildren	= false;			scrollMC.up.addEventListener(MouseEvent.MOUSE_DOWN, upPressHandler);			scrollMC.up.addEventListener(MouseEvent.MOUSE_UP, stopScroll);						//scrollMC.down.mouseChildren	= false;			scrollMC.down.addEventListener(MouseEvent.MOUSE_DOWN, downPressHandler);			scrollMC.down.addEventListener(MouseEvent.MOUSE_UP, stopScroll);			scrollMC.track.buttonMode = true;			scrollMC.track.addEventListener(MouseEvent.MOUSE_DOWN, trackPressHandler);						scrollMC.bar.y = scrollMC.track.y;// + (scrollMC.track.height - scrollMC.bar.height);//*percent/100;			scrollMC.bar.buttonMode = true;			scrollMC.bar.mouseChildren = false;			//scrollMC.gotoAndStop("out");			scrollMC.bar.addEventListener(MouseEvent.MOUSE_OUT, barOutHandler);			scrollMC.bar.addEventListener(MouseEvent.MOUSE_OVER, barOverHandler);			scrollMC.bar.addEventListener(MouseEvent.MOUSE_DOWN, barPressHandler);			//trace("bar h:"+scrollMC.bar.height);			//var barPercent:Number = _prop.backgroundHeight/_content.height;			//trace("barPercent:"+barPercent);			//scrollMC.bar.height = scrollMC.track.height *barPercent;			//trace("bar h:"+scrollMC.bar.height);						refreshContent();			addChild(scrollMC);			//updateContent();					}		private function upPressHandler(e:MouseEvent)		{			//trace("UP: ");			mode	= "up";			addEventListener(Event.ENTER_FRAME,scrollUp);			stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll);		}		private function downPressHandler(e:MouseEvent)		{			//trace("DOWN: ");			mode	= "down";			addEventListener(Event.ENTER_FRAME, scrollDown);			stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll);		}		private function trackPressHandler(e:MouseEvent)		{			//trace("DOWN: ");			mode	= "track";			addEventListener(Event.ENTER_FRAME, trackScroll);			stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll);		}		private function trackScroll(e:Event):void		{			//trace("track: "+scrollMC.track.mouseY+" height: "+scrollMC.track.height+" scale: "+scrollMC.track.scaleY);			var mousePosY:Number	= scrollMC.track.scaleY*scrollMC.track.mouseY;			scrollMC.bar.y	+= (scrollMC.track.y + mousePosY - scrollMC.bar.y - scrollMC.bar.height/2)/2;// - scrollMC.bar.y)/2;			if(scrollMC.bar.y <= scrollMC.track.y)			{				scrollMC.bar.y = scrollMC.track.y;			}			if((scrollMC.bar.y + scrollMC.bar.height)>= (scrollMC.track.y + scrollMC.track.height))			{				scrollMC.bar.y = (scrollMC.track.y + scrollMC.track.height) - scrollMC.bar.height;			}			percent			= 100*(scrollMC.bar.y - scrollMC.track.y)/(scrollMC.track.height - scrollMC.bar.height);			//trace("\t"+percent+" %");			//trace("bar h: "+scrollMC.bar.height+" y: "+scrollMC.bar.y);			updateContent();		}		private function scrollDown(e:Event):void		{			percent += STEP;			if(percent>100){				percent = 100;			}			//trace("startScroll: "+this.percent+" %");			scrollMC.bar.y = scrollMC.track.y + (scrollMC.track.height - scrollMC.bar.height)*percent/100;			updateContent();		}		private function scrollUp(e:Event):void		{			percent -= STEP;			if(percent<0){				percent = 0;			}			//trace("startScroll: "+this.percent+" %");			scrollMC.bar.y = scrollMC.track.y + (scrollMC.track.height - scrollMC.bar.height)*percent/100;			updateContent();		}		private function stopScroll(e:MouseEvent)		{			//trace("STOP: "+mode);			stage.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);			switch(mode)			{				case "up":					removeEventListener(Event.ENTER_FRAME,scrollUp)					break;				case "down":					removeEventListener(Event.ENTER_FRAME,scrollDown);					break;				case "track":					removeEventListener(Event.ENTER_FRAME, trackScroll);					break;							}		}				private function barOverHandler(e:MouseEvent)		{			scrollMC.bar.gotoAndStop("over");		}		private function barOutHandler(e:MouseEvent)		{			if (!isDragging)			{				//scrollMC.bar.gotoAndStop("out");			}		}		private function barPressHandler(e:MouseEvent)		{			//trace("BAR:"+this);			isDragging = true;			scrollMC.bar.gotoAndStop("down");						var bounds:Object = this.getBounds(this);			var x0:Number = 0;			var y0:Number = scrollMC.track.y;// - bounds.yMin;			var x1:Number = 0;			var y1:Number = Math.round(scrollMC.track.height- scrollMC.bar.height);// - scrollMC.down.height;//- bounds.yMax;			//var y1:Number = (scrollMC.track.y + scrollMC.track.height) - scrollMC.bar.height - scrollMC.down.height;//- bounds.yMax;			//trace("\ttrack h: "+scrollMC.track.height+" bar h: "+scrollMC.bar.height);//+" xMax: "+bounds.xMax+" yMax: "+bounds.yMax);			//trace("\txMin: "+bounds.xMin+" yMin: "+bounds.yMin+" xMax: "+bounds.xMax+" yMax: "+bounds.yMax);			//trace("\tx0: "+x0+", y0:"+y0+", x1:"+x1+", y1:"+y1);			var rect:Rectangle = new Rectangle(x0, y0, x1, y1);			scrollMC.bar.startDrag(false, rect);						stage.addEventListener(MouseEvent.MOUSE_MOVE, barDrag);			stage.addEventListener(MouseEvent.MOUSE_UP,barStopDrag);		}		private function barDrag(e:MouseEvent)//e:Event)		{						percent = Math.round((scrollMC.bar.y - scrollMC.track.y)*100 / (scrollMC.track.height - scrollMC.bar.height));			//trace("y: "+scrollMC.bar.y+" "+percent+"% ");						updateContent();			/*this.onMouseUp = function() {				this.stopDrag();				delete this.onMouseMove;			};*/		}		private function barStopDrag(e:MouseEvent)		{			//scrollMC.bar.gotoAndStop("out");			scrollMC.bar.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, barDrag);			stage.removeEventListener(MouseEvent.MOUSE_UP,barStopDrag);						//delete this.onMouseMove;		}		private function updateContent()		{			//scrollMC.bar.y = scrollMC.track.y + (scrollMC.track.height - scrollMC.bar.height)*percent/100;			content.y = y0 - Math.round((percent*(content.height-scrollMask.height)/100));			//trace("updateContent:\n\t"+content._name+" y:"+content.y);				}		public function refreshContent()		{			//trace("refreshContent:"+mc);			//trace("\tbar h:"+mc.bar._height);			var barPercent:Number = Math.round(100*scrollMask.height/content.height);			//trace("\tbarPercent:"+barPercent);			if(barPercent<100){				scrollMC.bar.height = Math.round(scrollMC.track.height *barPercent/100);				scrollMC.visible = true;			}else{				scrollMC.visible = false;			}			percent = 0;			updateContent();			scrollMC.bar.y = scrollMC.track.y;			//trace("\tbar h:"+mc.bar._height);		}		public function updateMask(_prop:Object)		{			//content.y = 			y0 = _prop.y;//_prop.maskY;			scrollMask.y = _prop.maskY;			scrollMask.height = prop.height + _prop.offsetHeight;					}		public function resetMask()		{			//trace("prop.y: "+prop.y+" maskY: "+prop.maskY);			//updateMask({y:prop.y, maskY:prop.maskY, offsetHeight:0});			updateMask({y:0, maskY:0, offsetHeight:0});					}		public function focusContent(contentY:Number)		{			//trace("refreshContent:"+mc);			/*			_parent._parent.debugTrace("focusContent: ");			_parent._parent.debugTrace("\tcy: "+contentY);			_parent._parent.debugTrace("\ty0: "+y0);			_parent._parent.debugTrace("\tch: "+mc.content._height);			_parent._parent.debugTrace("\tmh: "+mc.mask._height);			*/			if(content.height<=scrollMask.height)			{				percent = 0;			}else{				percent = Math.round(100*(y0 - contentY))/(content.height-scrollMask.height);			}			//_parent._parent.debugTrace("\t"+mc.percent+" %");			if(percent>100)			{				percent = 100;			}else if(percent <0)			{				percent = 0;			}			scrollMC.bar.y = scrollMC.track.y + (scrollMC.track.height - scrollMC.bar.height)*percent/100;			//_parent._parent.debugTrace("\t"+mc.percent+" %");			updateContent();		}	}}